

############
NOTES:  if you don't specify the stdout file name ... it gets a random name.
But we want to control the output file to use in the next step...
So we use js to rename the standard output and capture it ... 
use wildcard in the output file binding.
############

#!/usr/bin/env cwl-runner

cwlVersion: v1.0
class: CommandLineTool

baseCommand: [samtools, stats]

requirements:
  - class: InlineJavascriptRequirement

inputs:
  filein:
    type: File
    inputBinding:
      position: 1

outputs:
  statsout:
    type: File
    outputBinding:
      glob: "*.stats"

stdout: $(inputs.filein.path.split('/').pop() + '.stats')


###############
NOTES: added arguments in the yml ... because you could use the same tool with diff regex
###############
grep tool

cwlVersion: v1.0

class: CommandLineTool

baseCommand: grep

arguments:
  - "--with-filename"
  - "^GCF"

inputs:
  input_file:
    type: File
    inputBinding:
      position: 1

outputs:
  grepout:
    type: stdout



###############
NOTES:  used the arguments to cut here. see the delim param
###############
cut tool

cwlVersion: v1.0

class: CommandLineTool

baseCommand: cut
arguments:
  - "-d "
  - "-f"
  - "1,5-"

inputs:
  input_file:
    type: File
    inputBinding:
      position: 1

outputs:
  cutout:
    type: stdout



###############
NOTES: needed to specify the position or it doesn't appear
###############
cat_tool.cwl

#!/usr/bin/env cwl-runner

cwlVersion: v1.0

class: CommandLineTool

baseCommand: cat

inputs:
  filein:
    type: File[]
    inputBinding:
      position: 1

outputs:
  catout:
    type: stdout

stdout: final_output.txt


#####################
WORKS
######################

#!/usr/bin/env cwl-runner

cwlVersion: v1.0

class: Workflow

requirements:
  ScatterFeatureRequirement: {}

inputs:
  filein: File[]

outputs:
  pipeline_result:
    type: File
    outputSource: step2/catout


steps:
  step1:
    run: samtools_stats_tool.cwl
    scatter: [filein]
    scatterMethod: dotproduct
    in:
      filein: filein
    out:
      [statsout]

  step2:
    run: cat_tool.cwl
    in:
      filein: step1/statsout
    out:
      [catout]

#############################

#!/usr/bin/env cwl-runner

cwlVersion: v1.0

class: Workflow

requirements:
  ScatterFeatureRequirement: {}

inputs:
  filein: File[]

outputs:
  pipeline_result:
    type: File
    outputSource: step2/catout


steps:
  step1:
    run: samtools_stats_tool.cwl
    scatter: [filein]
    scatterMethod: dotproduct
    in:
      filein: filein
    out:
      [statsout]

  step2:
    run: grep_tool.cwl
    in:
      input_file: step1/statsout
    out:
      [grepout]

  step2:
    run: cat_tool.cwl
    in:
      filein: step2/grepout
    out:
      [catout]


